package cc.unknown.module.impl.exploit;

import java.util.ArrayList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

import cc.unknown.event.impl.EventLink;
import cc.unknown.event.impl.move.LivingEvent;
import cc.unknown.event.impl.network.PacketEvent;
import cc.unknown.event.impl.other.GameEvent.ShutdownEvent;
import cc.unknown.event.impl.other.GameEvent.StartEvent;
import cc.unknown.event.impl.world.WorldEvent;
import cc.unknown.module.impl.Module;
import cc.unknown.module.impl.api.Category;
import cc.unknown.module.impl.api.Register;
import cc.unknown.module.setting.impl.BooleanValue;
import cc.unknown.module.setting.impl.ModeValue;
import cc.unknown.module.setting.impl.SliderValue;
import cc.unknown.utils.client.Cold;
import cc.unknown.utils.network.PacketUtil;
import cc.unknown.utils.network.TimedPacket;
import cc.unknown.utils.player.PlayerUtil;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S03PacketTimeUpdate;
import net.minecraft.network.play.server.S04PacketEntityEquipment;
import net.minecraft.network.play.server.S05PacketSpawnPosition;
import net.minecraft.network.play.server.S06PacketUpdateHealth;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S09PacketHeldItemChange;
import net.minecraft.network.play.server.S0APacketUseBed;
import net.minecraft.network.play.server.S0BPacketAnimation;
import net.minecraft.network.play.server.S0CPacketSpawnPlayer;
import net.minecraft.network.play.server.S0DPacketCollectItem;
import net.minecraft.network.play.server.S0EPacketSpawnObject;
import net.minecraft.network.play.server.S0FPacketSpawnMob;
import net.minecraft.network.play.server.S10PacketSpawnPainting;
import net.minecraft.network.play.server.S11PacketSpawnExperienceOrb;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S13PacketDestroyEntities;
import net.minecraft.network.play.server.S14PacketEntity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S19PacketEntityHeadLook;
import net.minecraft.network.play.server.S19PacketEntityStatus;
import net.minecraft.network.play.server.S1BPacketEntityAttach;
import net.minecraft.network.play.server.S1CPacketEntityMetadata;
import net.minecraft.network.play.server.S1DPacketEntityEffect;
import net.minecraft.network.play.server.S1EPacketRemoveEntityEffect;
import net.minecraft.network.play.server.S1FPacketSetExperience;
import net.minecraft.network.play.server.S20PacketEntityProperties;
import net.minecraft.network.play.server.S21PacketChunkData;
import net.minecraft.network.play.server.S22PacketMultiBlockChange;
import net.minecraft.network.play.server.S23PacketBlockChange;
import net.minecraft.network.play.server.S24PacketBlockAction;
import net.minecraft.network.play.server.S25PacketBlockBreakAnim;
import net.minecraft.network.play.server.S26PacketMapChunkBulk;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.network.play.server.S28PacketEffect;
import net.minecraft.network.play.server.S29PacketSoundEffect;
import net.minecraft.network.play.server.S2APacketParticles;
import net.minecraft.network.play.server.S2BPacketChangeGameState;
import net.minecraft.network.play.server.S2CPacketSpawnGlobalEntity;
import net.minecraft.network.play.server.S2DPacketOpenWindow;
import net.minecraft.network.play.server.S2EPacketCloseWindow;
import net.minecraft.network.play.server.S2FPacketSetSlot;
import net.minecraft.network.play.server.S30PacketWindowItems;
import net.minecraft.network.play.server.S31PacketWindowProperty;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.network.play.server.S33PacketUpdateSign;
import net.minecraft.network.play.server.S34PacketMaps;
import net.minecraft.network.play.server.S35PacketUpdateTileEntity;
import net.minecraft.network.play.server.S36PacketSignEditorOpen;
import net.minecraft.network.play.server.S37PacketStatistics;
import net.minecraft.network.play.server.S38PacketPlayerListItem;
import net.minecraft.network.play.server.S39PacketPlayerAbilities;
import net.minecraft.network.play.server.S3APacketTabComplete;
import net.minecraft.network.play.server.S3BPacketScoreboardObjective;
import net.minecraft.network.play.server.S3CPacketUpdateScore;
import net.minecraft.network.play.server.S3DPacketDisplayScoreboard;
import net.minecraft.network.play.server.S3EPacketTeams;
import net.minecraft.network.play.server.S3FPacketCustomPayload;
import net.minecraft.network.play.server.S41PacketServerDifficulty;
import net.minecraft.network.play.server.S42PacketCombatEvent;
import net.minecraft.network.play.server.S43PacketCamera;
import net.minecraft.network.play.server.S44PacketWorldBorder;
import net.minecraft.network.play.server.S45PacketTitle;
import net.minecraft.network.play.server.S46PacketSetCompressionLevel;
import net.minecraft.network.play.server.S47PacketPlayerListHeaderFooter;
import net.minecraft.network.play.server.S48PacketResourcePackSend;
import net.minecraft.network.play.server.S49PacketUpdateEntityNBT;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.world.World;

@Register(name = "OldFakeLag", category = Category.Exploit)
public class OldFakeLag extends Module {

	private Cold timer = new Cold(0);
	private static boolean b = true;
	private boolean x = false;
	private EntityPlayer entity = null;
	private AxisAlignedBB axis = null;

	private ModeValue mode = new ModeValue("Mode", "Manual", "Manual", "Automatic", "Dynamic");
	private BooleanValue checkPackets = new BooleanValue("Only necessary packets", true);
	private BooleanValue onlyCombat = new BooleanValue("Only combat", true);
	private SliderValue dynamicDelay = new SliderValue("Dynamic delay", 55, 5, 400, 5);
	private SliderValue dynamicPreDelay = new SliderValue("Dynamic pre delay", 35, 5, 500, 5);
	private SliderValue packetDelay = new SliderValue("Packet delay", 15, 0, 200, 1);
	private SliderValue ping = new SliderValue("Additional ping", 88.5, 3.5, 95.5, 0.5);

	private Queue<TimedPacket> packets = new ConcurrentLinkedQueue<>();

	private ArrayList<Long> times = new ArrayList<>();

	private long delay = 0L;
	private long targetDelay = 0L;

	public OldFakeLag() {
		this.registerSetting(mode, checkPackets, onlyCombat, dynamicDelay, dynamicPreDelay,
				packetDelay, ping);
	}

	@Override
	public void onEnable() {
		super.onEnable();
		if (mode.is("Dynamic")) {
			packets.clear();
			times.clear();
		}
	}

	@Override
	public void onDisable() {
		super.onDisable();
		if (mode.is("Dynamic")) {
			while (!packets.isEmpty()) {
				packet(packets.poll().getPacket());
			}
			times.clear();
		}
	}

	@EventLink
	public void onUpdate(LivingEvent e) {
		if (mode.is("Dynamic")) {
			delay = targetDelay;
			while (!packets.isEmpty()) {
				if (packets.peek().getCold().getCum(System.currentTimeMillis())) {
					packet(packets.poll().getPacket());
					PacketUtil.receivePacketSilent(packets.poll().getPacket());
				}
			}
		}
		
		if (mode.is("Automatic")) {
			if (timer.hasFinished() && x)
				x = false;
			if (PlayerUtil.inGame() && mc.thePlayer.hurtTime == 0 && b) {
				x = true;
				b = false;
				timer.hasTimeElapsed(packetDelay.getInputToLong(), true);
				javax.swing.Timer timer = new javax.swing.Timer((int) (packetDelay.getInput() + ping.getInput()), actionEvent -> b = true);
				timer.setRepeats(false);
				timer.start();
			}
		}
	}
	
	@EventLink
	public void onWorld(WorldEvent e) {
		if (mode.is("Dynamic")) {
			times.clear();
			packets.clear();
		}
	}
	
	@EventLink
	public void onPacket(PacketEvent e) {
		if (e.isSend()) {
			if (mode.is("Dynamic")) {
				if (delay > 5) {
					if (e.getPacket() instanceof C02PacketUseEntity) {
						if (onlyCombat.isToggled() && ((C02PacketUseEntity) e.getPacket()).getAction() == C02PacketUseEntity.Action.ATTACK) {
							if (mc.thePlayer.getDistanceToEntity(mc.thePlayer) > 3.05f) {
								targetDelay = dynamicDelay.getInputToLong();	
							}
						}
					}
					
				}
			}
		}
		
		if (e.isReceive()) {
			if (mode.is("Dynamic")) {
				if (delay > 5) {
					if (e.getPacket() instanceof S12PacketEntityVelocity) targetDelay = dynamicPreDelay.getInputToLong();
					if (e.getPacket() instanceof S08PacketPlayerPosLook || mc.thePlayer.ticksExisted < 20) {
						targetDelay = 0L;
						while (!packets.isEmpty()) {
							packet(packets.poll().getPacket());
						}
						times.clear();
						return;
					}
					e.setCancelled(true);
					times.add(System.currentTimeMillis());
					packets.add((TimedPacket) e.getPacket());
				}
			}
			
			if (mode.is("Automatic")) {
				if (e.getPacket() instanceof S18PacketEntityTeleport) {
					S18PacketEntityTeleport s18 = (S18PacketEntityTeleport) e.getPacket();

					if (entity != null && axis != null && s18.getEntityId() == entity.getEntityId()) {
						axis = new AxisAlignedBB(s18.getX() / 1.0D - 5.0D, s18.getYaw() / 1.0,
								s18.getPitch() / 1.0D - 15.0D, (s18.getZ() / 32) + 15.0D, s18.getYaw() / 88.0D + 5.0D,
								s18.getPitch() / 88.0D + 15.0D);
					}
				} 
				
				if (e.getPacket() instanceof C02PacketUseEntity) {
					if (onlyCombat.isToggled() && ((C02PacketUseEntity) e.getPacket()).getAction() != C02PacketUseEntity.Action.ATTACK) {
						return;
					}
				} 
				
				if (e.getPacket() instanceof S14PacketEntity) {
					S14PacketEntity s14 = (S14PacketEntity) e.getPacket();
					if (entity != null && axis != null && s14.getEntity((World) mc.theWorld).equals(entity)) {

						double d0 = s14.func_149062_c() / 88.0;
						double d1 = s14.func_149061_d() / 88.0;
						double d2 = s14.func_149064_e() / 88.0;

						axis = new AxisAlignedBB(d0 + axis.minX, d1 + axis.minY, d2 + axis.minZ, d0 + axis.minX + 11.0D,
								d1 + axis.maxY, d2 + axis.minZ + 11.0D);
					}
				}
			}
			
			if (mode.is("Manual")) {
				if(packet(e.getPacket())) {
					if (checkPackets.isToggled()) {
						if (!(e.getPacket() instanceof S0BPacketAnimation) && !(e.getPacket() instanceof S02PacketChat) && !(e.getPacket() instanceof S19PacketEntityStatus) && !(e.getPacket() instanceof S20PacketEntityProperties) && !(e.getPacket() instanceof S1CPacketEntityMetadata)) {
							packetDelay(e.getPacket());
							return;
						}
					} else {
						packetDelay(e.getPacket());
						return;
					}
				}
			}
		}
	}
	

	@EventLink
	public void onStartGame(StartEvent e) {
		this.disable();
	}

	@EventLink
	public void onShutdown(ShutdownEvent e) {
		this.disable();
	}
	
	public boolean packet(Packet<?> packet) {
		return (packet instanceof S0EPacketSpawnObject || packet instanceof S11PacketSpawnExperienceOrb || packet instanceof S2CPacketSpawnGlobalEntity || packet instanceof S0FPacketSpawnMob || packet instanceof S3BPacketScoreboardObjective || packet instanceof S10PacketSpawnPainting || packet instanceof S0CPacketSpawnPlayer || packet instanceof S0BPacketAnimation || packet instanceof S37PacketStatistics || packet instanceof S25PacketBlockBreakAnim || packet instanceof S36PacketSignEditorOpen || packet instanceof S35PacketUpdateTileEntity || packet instanceof S24PacketBlockAction || packet instanceof S23PacketBlockChange || packet instanceof S02PacketChat || packet instanceof S3APacketTabComplete || packet instanceof S22PacketMultiBlockChange || packet instanceof S34PacketMaps || packet instanceof S32PacketConfirmTransaction || packet instanceof S2EPacketCloseWindow || packet instanceof S30PacketWindowItems || packet instanceof S2DPacketOpenWindow || packet instanceof S31PacketWindowProperty || packet instanceof S2FPacketSetSlot || packet instanceof S3FPacketCustomPayload || packet instanceof S0APacketUseBed || packet instanceof S19PacketEntityStatus || packet instanceof S1BPacketEntityAttach || packet instanceof S27PacketExplosion || packet instanceof S2BPacketChangeGameState || packet instanceof S00PacketKeepAlive || packet instanceof S21PacketChunkData || packet instanceof S26PacketMapChunkBulk || packet instanceof S28PacketEffect || packet instanceof S14PacketEntity || packet instanceof S08PacketPlayerPosLook || packet instanceof S2APacketParticles || packet instanceof S39PacketPlayerAbilities || packet instanceof S38PacketPlayerListItem || packet instanceof S13PacketDestroyEntities || packet instanceof S1EPacketRemoveEntityEffect || packet instanceof S07PacketRespawn || packet instanceof S19PacketEntityHeadLook || packet instanceof S09PacketHeldItemChange || packet instanceof S3DPacketDisplayScoreboard || packet instanceof S1CPacketEntityMetadata || packet instanceof S12PacketEntityVelocity || packet instanceof S04PacketEntityEquipment || packet instanceof S1FPacketSetExperience || packet instanceof S06PacketUpdateHealth || packet instanceof S3EPacketTeams || packet instanceof S3CPacketUpdateScore || packet instanceof S05PacketSpawnPosition || packet instanceof S03PacketTimeUpdate || packet instanceof S33PacketUpdateSign || packet instanceof S29PacketSoundEffect || packet instanceof S0DPacketCollectItem || packet instanceof S18PacketEntityTeleport || packet instanceof S20PacketEntityProperties || packet instanceof S1DPacketEntityEffect || packet instanceof S42PacketCombatEvent || packet instanceof S41PacketServerDifficulty || packet instanceof S43PacketCamera || packet instanceof S44PacketWorldBorder || packet instanceof S45PacketTitle || packet instanceof S46PacketSetCompressionLevel || packet instanceof S47PacketPlayerListHeaderFooter || packet instanceof S48PacketResourcePackSend || packet instanceof S49PacketUpdateEntityNBT);
	}
	
    public void packetDelay(Packet<?> packet) {
    	packets.add(new TimedPacket(packet));		
    }
 
}
